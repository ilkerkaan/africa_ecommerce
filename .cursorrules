---
description: Development standards and style guidelines for the Dukkadee/Africa Ecommerce project
globs: ["**/*.ex", "**/*.exs", "**/*.heex", "**/*.js", "**/*.css"]
alwaysApply: true
---

# Dukkadee/Africa Ecommerce Development Guidelines

## Project Organization
- Respect Phoenix context boundaries
- Follow Phoenix 1.7 directory structure conventions
- Place LiveView files in appropriate directories
- Use consistent naming patterns for modules and files
- Maintain explicit boundaries between contexts
- Design with future CRM and ERP modules in mind

## Elixir Coding Standards
- Follow Elixir style guide and conventions
- Use appropriate module documentation
- Keep functions small and focused
- Use pattern matching effectively
- Handle errors with appropriate return tuples ({:ok, result} or {:error, reason})
- Follow pipeline style when applicable
- Prefer immutability and functional approaches
- Name functions to reflect business purpose, not implementation details

## Phoenix LiveView Guidelines
- Use LiveView hooks appropriately
- Implement proper event handling
- Optimize rendering performance (temporary assigns, streams)
- Minimize stateful operations
- Use components for reusable UI elements
- Apply proper form validation
- Handle LiveView lifecycle events correctly
- Use PubSub for real-time features
- Implement proper error boundaries

## Database Practices
- Follow Ecto schema conventions
- Use migrations properly
- Define appropriate associations
- Implement validations at the schema level
- Use Ecto queries efficiently
- Handle database errors gracefully
- Preload related data to avoid N+1 query problems
- Create appropriate database indexes for performance
- Design extensible schemas for future modules

## Test Requirements
- Write comprehensive unit tests for context functions
- Test LiveView interactions with LiveViewTest
- Cover critical business logic
- Test context functions and boundary operations
- Verify form validations
- Mock external services appropriately
- Aim for high test coverage on core features (>80%)
- Test cross-context workflows with integration tests

## Security Standards
- Validate and sanitize all user inputs
- Protect sensitive data (API keys, credentials)
- Implement proper authentication
- Use secure route protection
- Apply CSRF protection
- Follow secure coding practices
- Regular security audits
- Proper error handling that doesn't leak sensitive information
- Design authentication and authorization for future module integration

## Performance Optimization
- Optimize database queries
- Keep LiveView performance efficient
- Minimize unnecessary renders
- Use proper state management
- Optimize asset loading
- Apply pagination for large datasets
- Follow direct in-app architecture for maximum performance
- Response time targets: page loads < 500ms, API < 100ms, real-time < 50ms

## Multi-Store Approach
- Maintain proper store isolation
- Use appropriate customer authentication
- Apply store-specific branding
- Handle custom domains correctly
- Ensure secure store data access
- Design database schemas with store_id as a fundamental relationship
- Store customization through component composition

## Brand Guidelines
- Use defined brand colors (#fddb24, #b7acd4, #272727)
- Apply consistent UI components
- Follow accessibility guidelines
- Maintain responsive design principles
- Store brand colors as database fields for dynamic application

## Store Feature Integration
- Ensure proper store feature discoverability
- Maintain consistent store navigation
- Implement intuitive store creation process
- Support efficient product management
- Design for extensibility and future integration with other technologies

## UI Component Integration
- Maintain accessibility features
- Adapt components for LiveView compatibility
- Preserve component styling conventions
- Use Tailwind utility classes consistently
- Follow mobile-first responsive design approach

## Future Module Considerations
- Design API interfaces that can be consumed by CRM and ERP modules
- Structure database schemas with extensibility for customer and resource relationships
- Implement a plug-in architecture that allows for module integration
- Create a consistent event system for cross-module communication
- Design UI navigation with space for future module access 